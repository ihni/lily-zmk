/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

&mt { flavor = "balanced"; };

/ {
    combos {
        compatible = "zmk,combos";

        caplocks {
            bindings = <&kp CAPS>;
            key-positions = <28 31>;
            timeout-ms = <50>;
            layers = <0>;
        };

        left_bootloader {
            bindings = <&bootloader>;
            key-positions = <50 51 52>;
        };

        right_bootloader {
            bindings = <&bootloader>;
            key-positions = <57 56 55>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  |  DEL  |

            bindings = <
&kp ESC  &kp N1  &kp N2  &kp N3    &kp N4     &kp N5                                   &kp N6  &kp N7         &kp N8     &kp N9   &kp N0    &kp GRAVE
&kp TAB  &kp Q   &kp W   &kp F     &kp P      &kp B                                    &kp J   &kp L          &kp U      &kp Y    &kp SEMI  &kp MINUS
&trans   &kp A   &kp R   &kp S     &kp T      &kp G                                    &kp M   &kp N          &kp E      &kp I    &kp O     &kp SQT
&trans   &kp Z   &kp X   &kp C     &kp D      &kp V   &mo 4        &trans              &kp K   &kp H          &kp COMMA  &kp DOT  &kp FSLH  &kp LGUI
                         &kp LALT  &kp LCTRL  &mo 1   &kp SPACE    &mt LEFT_SHIFT RET  &mo 2   &kp BACKSPACE  &kp DEL
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        lower_layer {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |  TOG |  ON   |  OFF  |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans          &trans         &trans            &trans             &trans                        &trans         &trans         &trans                &trans                 &trans        &trans
&trans  &kp SQT         &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp PERIOD                    &kp AMPERSAND  &kp PIPE       &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PERCENT   &trans
&trans  &kp EXCL        &kp MINUS      &kp PLUS          &kp EQUAL          &kp HASH                      &kp COLON      &kp SEMICOLON  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp QUESTION  &trans
&trans  &kp UNDERSCORE  &kp SLASH      &kp STAR          &kp BACKSLASH      &kp CARET   &trans    &trans  &kp TILDE      &kp DOLLAR     &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp AT_SIGN   &trans
                                       &trans            &trans             &trans      &trans    &trans  &trans         &trans         &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        raise_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |       |     |     |      |      |      |                   |      |       |       |      |       |       |
            // |   `   |  1  |  2  |  3   |  4   |  5   |                   |  6   |   7   |   8   |  9   |   0   |       |
            // |   F1  |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  <-  |   v   |   ^   |  ->  |       |       |
            // |   F7  |  F8 |  F9 |  F10 |  F11 |  F12 |        |  |       |  +   |   -   |   =   |  [   |   ]   |   \   |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&trans  &trans  &trans  &trans  &trans  &trans                    &trans  &trans    &trans    &trans  &trans     &trans
&trans  &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                    &trans  &trans    &trans    &trans  &trans     &trans
&trans  &kp N6  &kp N7  &kp N8  &kp N9  &kp N0                    &trans  &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans    &trans  &trans     &trans
                        &trans  &trans  &trans  &trans    &trans  &trans  &trans    &trans
            >;

            // sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN>;
        };

        utility_layer {
            bindings = <
&trans   &trans  &trans  &trans  &trans  &trans                     &trans  &trans             &trans            &trans           &trans  &trans
&kp F11  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                     &trans  &trans             &trans            &trans           &trans  &trans
&kp F12  &kp F6  &kp F7  &kp F8  &kp F9  &kp F10                    &trans  &kp K_PREVIOUS     &kp K_PLAY_PAUSE  &kp K_FORWARD    &trans  &trans
&trans   &trans  &trans  &trans  &trans  &trans   &trans    &trans  &trans  &kp K_VOLUME_DOWN  &kp K_MUTE        &kp K_VOLUME_UP  &trans  &trans
                         &trans  &trans  &trans   &trans    &trans  &trans  &trans             &trans
            >;
        };

        config_layer {
            bindings = <
&bt BT_CLR      &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4                    &ext_power EP_TOG  &ext_power EP_ON  &ext_power EP_OFF  &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans                          &trans             &trans            &trans             &trans  &trans  &trans
&trans          &trans        &trans        &trans        &trans        &trans                          &trans             &trans            &trans             &trans  &trans  &trans
&bt BT_CLR_ALL  &trans        &trans        &trans        &trans        &trans        &trans    &trans  &trans             &trans            &trans             &trans  &trans  &trans
                                            &trans        &trans        &trans        &trans    &trans  &trans             &trans            &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        utility {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };
};
